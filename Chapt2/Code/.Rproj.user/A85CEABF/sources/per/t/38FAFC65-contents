#Chapter 3 analyses
#- Housekeeping (Load packages and plot themes etc.)
#- First pull in all the data that will be needed
#- Analyse the Host-Parasite dataset and draw relevent figures
#- Calculate "well sampled" hosts and their parasites. create dataset of just well sampled hosts.
#- Calculate Specificity measures including Host ranage, Phylogenetic measures
#- Analyse across taxonomic clades and run Statistics to determine differences
#- Is there a way of determining sampling bias?
#This is to start setting up how we will assign a quantitative Psite specificity value for parasites.

####Housekeeping
library(picante)
library(vegan)
library(tidyverse)
library(taxize)
library(worrms)
library(rdiversity)
library(metacoder)
library(rowr)
library(ggpubr)
library(Cairo)
library(mgcv)
library(gratia)
library(quantreg)
library(lemon)
library(bipartite)
library(vcd)
library(modelr)

#if (!requireNamespace("BiocManager", quietly = TRUE)) %>%
#  install.packages("BiocManager")
#BiocManager::install("ggtree")
#library(ggtree)

#Set plot theme
source("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Code/theme_new.R")
source("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Code/theme_new.R")

theme_set(theme_new()) #Set over all look of graph (theme_classic(), ggthemes - Package with additional ggplot2 themes)


####Pull in datasets
#Full shark and other non shark hosts to parasite list
#see 'Uconnwebscrape.R' for database build...

SharkRef <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkFull3.0.csv")%>%
#SharkRef <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkFull3.0.csv")%>%
  mutate(diff = YearP - YearH) %>% 
  drop_na()

#Only cartilaginous fish ... and their parasites
Shark <- filter(SharkRef, classH %in% c('Elasmobranchii', 'Holocephali'))

#Pull only parasites out
sharkp <- dplyr::select(SharkRef, c('Parasite', Phylum = 'phylumP', Class = 'classP', Order = 'orderP', 
                                    Family = 'familyP', Genus = 'genusP', 'group','lifestyle','habitat'))%>% 
  distinct() %>%
  arrange(Parasite) %>%
  mutate_if(is.character,as.factor)

SharkRef <- dplyr::select(SharkRef, -c('group','lifestyle','habitat'))

#see <- dplyr::count(SharkRef, Host, Parasite)

#Pull only sharks that have been surveyed
sharkh <- dplyr::select(Shark, c('Host', Phylum = 'phylumH', Class = 'classH', Order = 'orderH', 
                                 Family = 'familyH', Genus = 'genusH')) %>%
  distinct() %>%
  arrange(Host)
sharkh <- as.data.frame(unclass(sharkh))

#Pull full shark list

#sharkvars <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkVars.csv") %>%
sharkvars <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkVars.csv") %>%
  mutate(depth_range = DepthRangeDeep - DepthRangeShallow) %>%
  mutate(depth_midpoint = depth_range/2 + DepthRangeShallow) %>%
  as.data.frame(unclass(sharkvars))

# need to fix a few things:
#IUCN codes (change N.E. (not evaluated) and convert LR/nt to NT, and LR/lc to LC)
#sharkvars$IUCN_Code [sharkvars$IUCN_Code %in% "N.E."] <- "NE"
#sharkvars$IUCN_Code [sharkvars$IUCN_Code %in% "LR/nt"] <- "NT"
#sharkvars$IUCN_Code [sharkvars$IUCN_Code %in% "LR/lc"] <- "LC"
 
sharkvars$DemersPelag <- as.factor(sharkvars$DemersPelag)
#sharkvars$IUCN_Code <- as.factor(sharkvars$IUCN_Code)

#sharksweb <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/FullSharklist.csv")

#################################
#Let's have alook at the data

data <- dplyr::count(SharkRef, phylumH, classH)
data <- dplyr::count(SharkRef, phylumP, classP)
data <- dplyr::count(SharkRef, Host)

#SharkRef <- dplyr::group_by(SharkRef, Host) %>%
#  filter(n()>=5) %>%
#  filter(n()<=7) %>%
#  ungroup()

##################################
#i) before we begin, we need to understand what our data represents.
#numref <- dplyr::count(SharkRef,Parasite)
#num <- dplyr::count(Shark, Host)


#####
#Lets get it into a decent structure (descriptions per year)

DRsharksdat <- sharkh
DRsharksdat <- DRsharksdat %>%
  group_by(Year) %>%#group by year
  summarise(n()) #Summarise (count) by group (year)  

DRsharksweb <- sharksweb
DRsharksweb <- DRsharksweb %>%
  group_by(Year) %>%
  summarise(n())

DRsharkp <- sharkp
DRsharkp <- DRsharkp %>%
  group_by(Year) %>%
  summarise(n())

DRs <- full_join(DRsharksdat, DRsharksweb, by='Year')
DRs <- merge.data.frame(DRs, DRsharkp, by='Year', all = TRUE) #join all three groups together
DRs <- rename(DRs, sharksdat = `n().x`) %>%
  rename(., sharksweb = `n().y`) %>%
  rename(., sharkp = `n()`) #rename column values
DRs <- filter(DRs, Year >= 1760 ) %>%
  filter(Year <= 2015 ) #subset to working time range

#Boxplot / histogram of difference (lag years)
ggplot(Shark,aes(x = diff)) + theme_new() +
  #geom_boxplot()
  geom_histogram(binwidth = 10, color="black", fill= NA,  boundary = -0.05) +
  #geom_area(stat = 'bin') +
  #coord_flip() + #rotate 90 deg clockwise
  labs(y="Number of Species", x="Lag (Years)", linetype = " ") +
  coord_capped_cart(bottom = 'both', left = 'both') +
  scale_x_continuous(limits = c(), expand = c(0.1,0.1)) +
  scale_y_continuous(limits = c(-1,300), expand = c(0.1,0.1))

#Average time lag:
#mean(Shark$diff) = 105.8218
#mean(SharkRef$diff) = 100.9137

#Randhawa and Poulin Figure (Lag as a function of host discovery)
RPfigure <- left_join(Shark, sharkp, by = c('Parasite'))
#RPfigure <- RPfigure %>%
#  filter(., phylum == c('Arthropoda', 'Platyhelminthes', 'Nematoda', 'Acanthocephala', 'Annelida'))
#count(RPfigure, phylum)
##Add distinction between parasitic phyla
ggplot(data = RPfigure, aes(x = YearH, y = diff)) + theme_new() +
  geom_point(size = 1, shape = 21, fill = "white")+
  geom_smooth(method = 'gam', formula = y ~ x, se = TRUE, colour = 'darkgrey', linetype = 'longdash', size = 0.4)+
  geom_hline(yintercept = 0, linetype = 'longdash', colour = 'grey', size = 0.5)+
  labs(y="Time Lag (Years)", x="Year", linetype = " ")+ 
  scale_color_brewer(palette="Spectral")+ 
  coord_capped_cart(bottom = 'none', left = 'both') +
  scale_x_continuous(limits = c(), expand = c(0.1,0.1)) +
  scale_y_continuous(limits = c(), expand = c(0.1,0.1)) 

######################################
#ii) To take care of undersampling/rare species ... we need to select species with parasites above a certain threshold. 
#That threshold needs to be determined by an accummulation curve. if it's reaching asymptote ... means its been sampled enough.
#To do this, I've downloaded the full shark refs dataset, including all their papers... see webscrape.R
#Lets automate this for 500+ species
#NB to note, "SharkRef" is a conglomeration of 3 datasets... SharkPapers is just one. 
#There are 99 species difference between them.
##Therefore, stick to just SharkPapers through this section

SharkPapers <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/webscrapeSharkRef.csv")
#SharkPapers <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/webscrapeSharkRef.csv")

#To determine a "well sampled" host, 2 conditions need to be met:
#1: evidence for saturation in their parasite accumulation curves
#2: host species with at least 5 different parasites
##SAC's SE don't work with 2 site or less ... therefore we need to remove those before we can begin ...

SharkSampPsite <- dplyr::select(SharkRef, Host, Parasite) %>% 
  distinct() %>%
  dplyr::count(Host, Parasite) %>%
  dplyr::count(Host) %>%
  filter(n > 4) #satisfies condition 2

SharkSampIndex <- dplyr::select(SharkPapers, host, parasite, index) %>% 
  distinct() %>%
  dplyr::count(host, index) %>%
  dplyr::count(host) %>%
  filter(n > 1)

SharkSamp <- inner_join(SharkSampPsite, SharkSampIndex, by = c("Host"="host")) %>%
  dplyr::filter(!(Host %in% "Carcharhinus perezii"))

rm(SharkSampPsite, SharkSampIndex)

#Test code on host Isurus oxyrinchus
#Ioxyrinchus <- filter(SharkPapers, host %in% 'Aculeola nigra') %>%
#  dplyr::count(index, parasite) %>%
#  spread(parasite, n) %>%
#  select(-index) %>%
#  mutate_all(~replace_na(.,0))

#testSAC <- specaccum(Ioxyrinchus, method = "random", permutations = 100)
#testSAC <- as.data.frame(cbind(testSAC$sites, testSAC$richness, testSAC$sd)) %>%
#  select( sites='V1', richness='V2', sd='V3')

#ggplot(testSAC, aes(x= sites, y=richness)) +
#  geom_point() +
#  #geom_pointrange(aes(ymin=richness-sd, ymax=richness+sd))
#  geom_line() + 
#  geom_linerange(aes(ymin=richness-sd, ymax=richness+sd)) 

#How do you determine if this is a curve or not.
#Theoretically, if number of papers(sites) = richness prediction (richness), then there's a 1-1 and no chance to predict

#test$richness == test$sites

###
#Now that I have this working, I lapply across entire set to include all hosts

Host <- SharkSamp$Host
  
totalSamp <- sapply(Host, function(i) {
  filter(SharkPapers, host %in% i) %>%
    dplyr::count(index, parasite) %>%
    spread(parasite, n) %>%
    dplyr::select(-index) %>%
    mutate_all(funs(replace_na(.,0)))
})                            #Created list of community matricies per species identified above

SAC <- lapply(totalSamp, function(comm) {
  SAC <- specaccum(comm, method = "random", permutations = 1000)
  as.data.frame(cbind(SAC$sites, SAC$richness, SAC$sd)) %>%
    dplyr::select( sites='V1', richness='V2', sd='V3')
})                            #Run species accumulation curves for each community matrix/species

test <- sapply(SAC, function(i) {
  
  i$sites == i$richness
  
})             #Logical test to find SAC's with all values of sites == richness (i.e: no curve in SAC)

test <- str_count(test, ('TRUE')) <= 2  #"TRUE" are species that have a curve
SharkRefcor <- as_tibble(cbind(Host, test)) 

# Let's bring this all together... and some housekeeping
SharkRefcor<- left_join(SharkRef, SharkRefcor, by = 'Host') %>%
  filter(test == TRUE) %>%
  dplyr::select(-test) %>%
  drop_na()

rm(Host, test, SAC, totalSamp, SharkSamp)

#summary(SharkRefcor)
#see<- dplyr::count(SharkRefcor, Parasite)

# Lets see if if we can create a "sampling effort" column; i.e. number of papers published per parasite. 
sampef<- dplyr::count(SharkPapers, host, index) %>%
  dplyr::count (host) %>%
  dplyr::rename('sampef'='n')

############################################################################
# To get specificity values, I need a few data conversions.
# 1) Create a community matrix [a matrix with sites/samples in the rows and taxa in the columns]
# 2) Phylogeny/Taxonomy (in my case). This needs to be in a phylo object which needs to be build from a taxonomic tree. 
# I've put these into functions to use later in the code.
 #The dataset I want to use. e.g.: SharkRef, Shark, SharkRefcor

# Create community matrix
### commathost <- where Hosts are the species and parasites the sites
### commathost <- where Parasites are the community and hosts the sites 

commathost <- function (x) {
  commat <- dplyr::select(x, c('Host', 'Parasite'))
  commat <-   cbind.data.frame('Parasite' = commat$Parasite, count = 1, 'Host' = commat$Host)
  commat <- sample2matrix(commat)
  commat[order(rownames(commat)),order(colnames(commat))]
}

commatpsite <- function (x) {
  commat <- dplyr::select(x, c('Host', 'Parasite'))
  commat <- cbind.data.frame('Host' = commat$Host, count = 1, 'Parasite' = commat$Parasite)
  commat <- sample2matrix(commat)
  commat[order(rownames(commat)),order(colnames(commat))]
}

#2) Create Phylogenetic tree object of host species. 
#This can then be used to calculate taxonomic distance across the community matrix
# Create Phylogenetic tree
treefunc.host <- function (x) { # x <- SharkRef

  Sharktax <- dplyr::select(x, c(phylumH,classH,orderH,familyH,genusH,species = "Host"))%>% 
  distinct() %>% #pull out host classification info, remove duplicate records
  arrange(species) %>%
  mutate_if(is.character,as.factor)

  #need to tell formula "as.phylo.formula" how these are all related
  taxrel <- ~phylumH/classH/orderH/familyH/genusH/species 
  #this allows for a reworked formula for a cleaner output following taxonomic breaks
  source("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Code/as.phylo.formula2.R") 
  tree <- as.phylo.formula(taxrel, data = Sharktax, collapse = FALSE)
  
  nodelabel.phylo(tree, column_to_rownames(Sharktax, 'species'), strict=TRUE)

}

treefunc.psite <- function (x) {
  
  Sharktax <- dplyr::select(x, c(phylumP,classP,orderP,familyP,genusP,species = "Parasite"))%>% 
    distinct(species, .keep_all = TRUE) %>% #pull out host classification info, remove duplicate records
    arrange(species) %>%
    mutate_if(is.character,as.factor)
  
  #need to tell formula "as.phylo.formula" how these are all related
  taxrel <- ~phylumP/classP/orderP/familyP/genusP/species 
  #this allows for a reworked formula for a cleaner output following taxonomic breaks
  source("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Code/as.phylo.formula2.R") 
  tree <- as.phylo.formula(taxrel, data = Sharktax, collapse = FALSE)
  
  nodelabel.phylo(tree, column_to_rownames(Sharktax, 'species'), strict=TRUE)
  
}

#3) Create a taxonomic distance matrix
## Lets create a matrix of taxonomic distances between host species. 
# I use ape::cophenetic.phylo (tree) over vegan::taxa2dist (taxa) as it produces a cleaner matrix. 
# I then Convert it to percentage for clarity.

#ape::cophenetic (using the taxonomic tree)

taxdistance.ape <- function (x) {
  taxdist <- as_tibble(cophenetic.phylo(x))
  taxdist/max(taxdist)*100
  
}

#Vegan's solution to building a taxonomic dist matrix
##These give weird values
taxdistance.vegan.host <- function (x) {
  Sharktax <- dplyr::select(x, c(phylumH,classH,orderH,familyH,genusH,species = "Host"))%>% 
    distinct() %>% #pull out host classification info, remove duplicate records
    arrange(species) %>%
    mutate_if(is.character,as.factor) %>%
    column_to_rownames(var = 'species')
  
  taxdist <- as.data.frame(as.matrix(taxa2dist(Sharktax, varstep = TRUE)))
  rownames(taxdist) <- colnames(taxdist)
  taxdist <- taxdist[order(rownames(taxdist)),order(colnames(taxdist))]

}

taxdistance.vegan.psite <- function (x) {
  Sharktax <- dplyr::select(x, c(phylumP,classP,orderP,familyP,genusP,species = "Parasite"))%>% 
    distinct(species, .keep_all = TRUE) %>% #pull out host classification info, remove duplicate records
    arrange(species) %>%
    mutate_if(is.character,as.factor) %>%
    column_to_rownames(var = 'species')
  
  taxdist <- as.data.frame(as.matrix(taxa2dist(Sharktax, varstep = TRUE, check = TRUE)))
  rownames(taxdist) <- colnames(taxdist)
  taxdist <- taxdist[order(rownames(taxdist)),order(colnames(taxdist))]
  
}

#If I want to draw the tree to analyse it...
#  https://yulab-smu.top/treedata-book/index.html
#For drawing a NICE tree

tree <- dplyr::count(SharkRef, phylumH, classH, orderH, familyH, genusH, Host)
tree <- treefunc.host (drop_na(tree))
treeplot <- as_tibble(tree)

ggtree(tree, layout='circular') + geom_text(aes(label=node))
ggtree(tree, branch.length='none',aes(color=phylum), layout='circular') +
  
  #geom_cladelabel()
  #geom_tiplab() #what would be good is to label according to ... say class as opposed so species. Play at a later stage.
  geom_strip("Arthropods", "Molluscs")

########################################################################
#1) Basic Host Range
range <- dplyr::count(SharkRef, Parasite) %>%
  arrange(desc(n))

#1.a) Host Range methods according to Krasnov, Poulin and Moulliot (2011)
#First, build community matrix
commat <- commatpsite(SharkRef)

# Method 1: basic "count" of species infested by a parasite
# Species richness (i.e.: no. of hosts per parasite - host range)
commat <- commathost(SharkRef)
range <- as_tibble(specnumber(commat))
range<- cbind(Parasite = row.names(commat), range)

#summary(range)  

#draw boxplot ontop of histogram


# Draw the boxplot and the histogram 
p1 <- ggplot() +
  geom_boxplot(data = range, aes(value)) +
  coord_capped_cart(bottom = 'both', left = 'both') +
  scale_x_continuous(limits = c(0,80), expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(), expand = c(0.01,0.01)) +
  labs(x = NULL, y = NULL) + 
  guides(x = "none", y = "none")
  
p2 <- ggplot()+
  geom_histogram(data = range, aes(value), binwidth = 1) +
  labs(y="Count", x="No. of Hosts") +
  coord_capped_cart(bottom = 'both', left = 'both') +
  scale_x_continuous(limits = c(0,80), expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(), expand = c(0.01,0.01)) 

ggarrange(p1, p2, nrow = 2, align = "v", heights = c(1,9), widths = c(1,2), 
          common.legend = FALSE, legend = 'bottom') #RPfigure with 90deg hist

# and draw it in a rarefied species accumulation curve
specaccum <- specaccum(commat, method = 'rarefaction')
SAC <- cbind.data.frame(individuals = specaccum$individuals, sites = specaccum$sites, 
                        richness = specaccum$richness, sd = specaccum$sd)
#plot the SAC
ggplot() + 
  #geom_ribbon(aes(x = SAC$sites, ymin = SAC$richness - SAC$sd, ymax = SAC$richness + SAC$sd)) +
  geom_linerange(aes(x = SAC$sites, ymin = SAC$richness - 2*SAC$sd, ymax = SAC$richness + 2*SAC$sd)) +
  geom_line(aes(x = SAC$sites, y = SAC$richness)) + 
  #coord_capped_cart(bottom = 'none', left = 'bottom') +
  scale_x_continuous(limits = c(), expand = c(0.0,0.0)) +
  scale_y_continuous(limits = c(), expand = c(0.0,0.0)) 
  
# Method 2: Species Accumulation models 
#estimate the extrapolated species richness in a species pool, or the number of unobserved species.
#This is done through various non-parametric models. 
pool <- poolaccum(commat, permutations = 1000)
poolsum <- summary(pool)
#plot(pool) # display = "chao"

#Let's see if we can ggplot these
poolsumplot <- as_tibble(do.call(cbind, poolsum))
s <- cbind.data.frame(n = poolsumplot$N, value = poolsumplot$S, lowquart = poolsumplot$`2.5%`, 
                      highquart = poolsumplot$`97.5%`, stdev = poolsumplot$Std.Dev, key = "S" )
chao <- cbind.data.frame(n = poolsumplot$V6, value = poolsumplot$Chao, lowquart = poolsumplot$V8, 
                         highquart = poolsumplot$V9, stdev = poolsumplot$V10, key = "Chao" )
jack1 <- cbind.data.frame(n = poolsumplot$V11, value = poolsumplot$`Jackknife 1`, lowquart = poolsumplot$V13, 
                          highquart = poolsumplot$V14, stdev = poolsumplot$V15, key = "Jackknife 1" )
jack2 <- cbind.data.frame(n = poolsumplot$V16, value = poolsumplot$`Jackknife 2`, lowquart = poolsumplot$V18, 
                          highquart = poolsumplot$V19, stdev = poolsumplot$V20, key = "Jackknife 2" )
boot <- cbind.data.frame(n = poolsumplot$V21, value = poolsumplot$Bootstrap, lowquart = poolsumplot$V23, 
                         highquart = poolsumplot$V24, stdev = poolsumplot$V25, key = "Bootstrap" )
poolsumplot <- bind_rows(s, chao, jack1, jack2, boot)


ggplot(data = poolsumplot) + 
  geom_ribbon(aes(x = poolsumplot$n, ymin = poolsumplot$lowquart, ymax = poolsumplot$highquart), col = "lightgrey", fill = NA) +
  geom_line(aes(x = poolsumplot$n, y = poolsumplot$value)) + 
  coord_capped_cart(bottom = 'none', left = 'bottom') +
  scale_x_continuous(limits = c(0,255), expand = c(0.0,0.0)) +
  scale_y_continuous(limits = c(0,5900), expand = c(0.0,0.0)) +
  facet_wrap(vars(key), ncol = 2, scales = "free")
  

specpool <- specpool(commat) # predicts final numbers for models. Works off presence data

#Method 3: Quantitative model using Chao estimation
#estimateR then allows a correction for biases arising from the undersampling of rare species that could escape detection
#However it's based off count, not presence absence data so it can't be used.

#quantmod <- as_tibble(t(estimateR(commat))) #works off count data
#sum(quantmod$S.chao1)

#Let's draw us some host range histograms and boxplots.
ggplot()+
  geom_histogram(data = FinalSet, aes(hostrange), binwidth = 1) +
  scale_x_continuous(limits = c(), expand = expansion(mult = c(0.0,0.0))) + 
  scale_y_continuous(limits = c(), expand = expansion(mult = c(0.0,0.0))) +
  labs(y="Count", x="No. of Parasites per Host")

ggplot(data = FinalSet)+
  geom_boxplot(aes(x = Phylum, y = hostrange)) +
  scale_y_continuous(limits = c(0,45), expand = expansion(mult = c(0.0,0.0))) +
  labs(y="Host Range")

#1.2) Structural Host Specificity
commat <- commathost(SharkRef)
StrucSpec <- bipartite::specieslevel(commat, index = "ALLBUTD", nested.weighted = FALSE)

#bring structural specificity measures into final set
StrucSpec <- as_tibble(StrucSpec$`lower level`) %>%
  select(H = 'partner.diversity', 'd')

FinalSet <- cbind(NRI, StrucSpec)
  

##################
#2 Phylogenetic distinctiveness among host species according to Vegan
### Before we start, lets reset community and tree for this analysis
# this is where the Ape and Vegan package comes in and its use of Functional diversity.

commat <- commathost(SharkRef) #"..psite" = host as habitat, "..host" = psite as "habitat" ... to get host tax distances
#taxdist <- taxdistance.vegan.host (SharkRef) #vegan::taxa2dist()
tree <- treefunc.host (SharkRef)
taxdist <- taxdistance.ape(tree) # ape::cophenetic.phylo()
rownames(taxdist) <- colnames(taxdist) 

## Let's run the vegan::taxondive analysis
# Calculates a few indicies from Clarke & Warwick (1998, 2001)
# delta - Taxonomic diversity, delta* - Taxonomic distictness. These are mainly for abundance data and will be ignored
# delta+ - Taxonomic diversity and it's Stdev, s.delta+ - Tax diversity as a product of species diversity,
# - it includes stdev of the test to draw the funnel plot
# lambda - variation in taxonomic distictness
# - does not include the stdev ... therefore, we need to conduct this in Primer 7 and import back into here. 
# z with p-value to test how far from normal

##Lets get it into the right format for Primer...
# community "abundance" matrix
#commat_pri <- t(commat)
# taxonomy
#taxonomy_pri <- dplyr::select(SharkRef, c(speciesH = "Host", genusH,familyH,orderH,classH,phylumH))%>% 
#  distinct() %>% #pull out host classification info, remove duplicate records
#  arrange(speciesH)
#write
#write.csv(commat_pri, "C:/Users/tmor201/Documents/Primer 7 files/My files/commat.csv")
#write.csv(taxonomy_pri, "C:/Users/tmor201/Documents/Primer 7 files/My files/taxonomy.csv")

modtree <- taxondive(commat, as.matrix(taxdist), match.force = TRUE)

# plot(modtree) #Just a quick plot to compare to proper ggplot below
# see<-summary(modtree)

#convert out of list
moda <- as_tibble(do.call(cbind, modtree)) %>%
  mutate_all(., ~if_else(!(. %in% "Inf"), ., NA_real_)) %>%
  mutate_all(., ~if_else(!(. %in% "-Inf"), ., NA_real_)) %>%
  mutate_all(., ~if_else(!(. %in% "NaN"), ., NA_real_)) 

#To draw functional diversity funnel plot in ggplot2.
#first calculate the limits of the funnel, 
#include z values and their significance from Normal distribution for Delta+, 
#add species names ... then plot.
z <- as_tibble(unclass(summary(modtree)))%>%
  filter(row_number() <= n()-1) %>% #somehow "z" has an extra row. needed removal
  dplyr::select(Z = "z(Delta+)", Z_pr = "Pr(>|z|)") %>%
  bind_cols(Sites = rownames(commat))

moda <- mutate(moda, ll_Dplus = EDplus - 2*moda$sd.Dplus) %>%
  mutate(ul_Dplus = EDplus + 2*moda$sd.Dplus) %>%
  bind_cols(Sites = rownames(commat)) %>%
  left_join(., z, by = "Sites" ) %>%
  drop_na(Dplus) %>%
  dplyr::select(Species = "Sites", D = "Species", Dplus, EDplus, sd.Dplus, ll_Dplus, 
                ul_Dplus, Lambda, Z, Z_pr)

rm(z)

#Lets bring in the Primer 7 data ... and compare/join?
moda_pri <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/Distinctness_values.csv")
moda_pri <-  mutate(moda_pri, ll_Lambda = ELambda - 2*moda_pri$sd.Lambda) %>%
  mutate(ul_Lambda = ELambda + 2*moda_pri$sd.Lambda) %>%
  dplyr::select(-X, Sites = "Species", Species = "D")

moda_pri$Sites <- as.character(moda_pri$Sites)

#see <- anti_join(moda_pri, moda, by = "Species") #looks good to me ... its identical

moda <-  bind_cols(moda_pri, Z = moda$Z, Z_pr = moda$Z_pr)

rm (moda_pri)

# Finally, if only 2 species Lambda = 0 ... therefore we need to remove these...
moda$Lambda [moda$Lambda %in% "0"] <- NA
#Bring in separate upper and lower limits for Lambda values from Primer 7


#Histogram Dplus
p2<-ggplot()+theme_new()+
  geom_histogram(data = moda, aes(Dplus), binwidth = 1, color="black", fill= NA,  boundary = -0.05) +
  scale_x_continuous(limits = c(0,100), expand = expansion(mult = c(0.01,0.01))) + 
  scale_y_continuous(limits = c(0,510), expand = expansion(mult = c(0.01,0.01))) +
  coord_capped_cart(bottom = 'both', left = 'both') +
  theme(panel.border=element_blank(), 
        axis.line.y = element_blank(), 
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank())+
  coord_flip() + #rotate 90 deg clockwise
  labs(y="Count", x="")

p2

#Funnel plot Dplus
p1<-ggplot() +
  geom_point(aes(x = moda$Species, y = moda$Dplus), col = 'darkgrey' ) +
  geom_line(aes(y = moda$EDplus, x = moda$Species), col = "black") + #Horizontal line
  geom_line(aes(y = moda$ul_Dplus, x = moda$Species)) + # Upper limit (Funnel)
  geom_line(aes(y = moda$ll_Dplus, x = moda$Species)) + # Lower limit (Funnel)
  coord_capped_cart(bottom = 'left', left = 'bottom') +
  scale_x_continuous(limits = c(0, 85), expand = c(0.01,0.01)) + #Psite (0,85), Host (0,125)
  scale_y_continuous(limits = c(0,100), expand = c(0.01,0.01)) +
  labs(y= expression("Taxonomic Distinctness ("*Delta*'+)'), x="No. of Species")
p1

#Hisogram Lambda
p2<-ggplot()+theme_new()+
  geom_histogram(data = moda, aes(Lambda), binwidth = 15, color="black", fill= NA,  boundary = -0.05) +
  scale_x_continuous(limits = c(-1,1500), expand = expansion(mult = c(0.01,0.01))) + 
  scale_y_continuous(limits = c(), expand = expansion(mult = c(0.01,0.01))) +
  coord_capped_cart(bottom = 'both', left = 'both') +
  theme(panel.border=element_blank(), 
        axis.line.y = element_blank(), 
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank())+
  coord_flip() + #rotate 90 deg clockwise
  labs(y="Count", x="")

p2

#Funnel plot Lambda
p1<-ggplot() +
  geom_point(aes(x = moda$Species, y = moda$Lambda), col = 'darkgrey' ) +
  geom_line(aes(y = moda$ELambda, x = moda$Species), col = "black") + #Horizontal line
  geom_line(aes(y = moda$ul_Lambda, x = moda$Species)) + # Upper limit (Funnel)
  geom_line(aes(y = moda$ll_Lambda, x = moda$Species)) + # Lower limit (Funnel)
  coord_capped_cart(bottom = 'left', left = 'bottom') +
  scale_x_continuous(limits = c(0,85), expand = c(0.01,0.01)) + #Psite (0,85), Host (0,125)
  scale_y_continuous(limits = c(0,1500), expand = c(0.01,0.01)) +
  labs(y= expression("Variation in Taxonomic Distinctness ("*Lambda*'+)'), x="No. of Species")
p1

ggplot() +
  geom_point(aes(x = moda$Dplus, y = moda$Lambda), col = 'darkgrey' )

#filter everything above and below the lines ... see if I compare these numbers to the significant ones...
test <- filter(moda$Lambda, Z_pr < 0.05) # 1043 / 1657 = 63% are significant (out the funnel)
test2 <- filter(moda, Dplus <= ll_Dplus) # (3+1038) 1041 / 1657 = 63%
Lambda <- filter(moda, Lambda > 0) #only 744 species above 3 hosts
test3 <- filter(moda, Lambda <= ll_Lambda) # (3+249)  252 / 744 = 34%

rm(test,test2,test3,Lambda)

#Average across stuff...
test <- left_join(moda, sharkp, by = c("Sites" = "Parasite")) # 1043 / 1657 = 63% are significant


group <- test %>%
  group_by(Class) %>%
  summarize_all(mean, na.rm = TRUE)

ggplot() +
  geom_point(aes(x = group$Species, y = group$Dplus), col = 'darkgrey' )+
  geom_line(aes(y = moda$EDplus, x = moda$Species), col = "black") + #Horizontal line
  geom_line(aes(y = moda$ul, x = moda$Species)) + # Upper limit (Funnel)
  geom_line(aes(y = moda$ll, x = moda$Species))  # Lower limit (Funnel)

ggplot() +
  geom_point(aes(x = group$Dplus, y = group$Lambda), col = 'darkgrey' )

#Bring it together into the final set
FinalSet <- moda %>%
  select(Species = Sites, hostrange = Species, Dplus, sd.Dplus, SDplus, Lambda)

#rm(moda, modtree, commat, taxdist)

ggplot() +
  geom_point(aes(x = FinalSet$Species, y = moda$Dplus), col = 'darkgrey' ) +
  geom_line(aes(y = moda$EDplus, x = moda$Species), col = "black") + #Horizontal line
  geom_line(aes(y = moda$ul, x = moda$Species)) + # Upper limit (Funnel)
  geom_line(aes(y = moda$ll, x = moda$Species)) + # Lower limit (Funnel)
  coord_capped_cart(bottom = 'left', left = 'bottom') +
  scale_x_continuous(limits = c(0, 120), expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(0,105), expand = c(0.01,0.01)) +
  labs(y= expression("Taxonomic Distinctness ("*Delta*'+)'), x="No. of Species")



ggplot(Shark,aes(x = diff)) + theme_new() +
  #geom_boxplot()
  geom_histogram(binwidth = 10, color="black", fill= NA,  boundary = -0.05) +
  #geom_area(stat = 'bin') +
  #coord_flip() + #rotate 90 deg clockwise
  labs(y="Number of Species", x="Lag (Years)", linetype = " ") +
  coord_capped_cart(bottom = 'both', left = 'both') +
  scale_x_continuous(limits = c(), expand = c(0.1,0.1)) +
  scale_y_continuous(limits = c(-1,300), expand = c(0.1,0.1))


################
#3) Phylogenetic diversity according to Picante
# Before we start, lets reset community and tree for this analysis

commat <- commatpsite(SharkRef)
tree <- treefunc.psite (SharkRef)
#taxdist <- taxdistance.vegan (SharkRefcor)
taxdist <- taxdistance.ape(tree)
rownames(taxdist) <- colnames(taxdist) 

# we can inspect the phylogenetic diversity of host species exploited by a particular parasite

#a. The phylogenetic diversity of the host species exploited by parasite i (PDi) using the function pd.
#phylodiv <- pd(commat, tree, include.root=FALSE) #is calculated in picante::ses.pd (below).
## set<- cbind.data.frame(set, phylodiv$PD)

#b. The standardized effect size of the phylogenetic diversity of hosts exploited by parasite i (SPSi) using the function ses.pd
stphylodiv <- ses.pd(commat, tree, null.model = c("taxa.labels"), runs = 999, include.root=FALSE)
stphylodiv <- rownames_to_column(stphylodiv, "Species") %>%
  select(Species, pd = pd.obs, ses.pd = pd.obs.z, pd.p.value = pd.obs.p)

#c. Calculating MPD per parasite
# Before we start, lets reset community and tree for this analysis
#commat <- commathost(SharkRef)
#tree <- treefunc (SharkRef)
#taxdist <- taxdistance.vegan (SharkRefcor)
#taxdist <- taxdistance.ape(tree)
#rownames(taxdist) <- colnames(taxdist)  

# mean phylogenetic distance (MPD) between all possible pairs of hosts infected by a parasite 
# (i.e: the host "community" infested by the parasite)

# mphylodist <- mpd(commat, taxdist) #is calculated in picante::ses.mpd (below).

#d. Standardizing MPD across parasites
#To allow comparisons among multiple parasites, we standardised these MPD values
#NRI = -1*(MPDobs-mean MPDnull/ sdMPDnull)
#In picante, rather than calculating NRI, standardized effect sizes (SES) are reported. 
#These values are equivalent to -1 times NRI. To calculate use SESmpd;

#Important to check "Null model" ! 

NRI <- ses.mpd(commat, taxdist, null.model = "taxa.labels", abundance.weighted = FALSE, runs = 999)
NRI <- rownames_to_column(NRI, "Species") %>%
  select(Species, mpd = mpd.obs, ses.mpd = mpd.obs.z, mpd.p.value = mpd.obs.p)

#mpd.obs = MPD for the community; mpd.obs.z = standardized MPD (equivalent to -NRI); 
#mpd.obs.p = p value of observed mpd vs. null communities.
##Positive values of mpd.obs.z (NRI) and high p values (> 0.95) indicate phylogenetic evenness, 
#i.e., species within the community are more distantly related than expected by chance. 
##Negative values of mpd.obs.z (NRI) and low p values (< 0.05) indicate phylogenetic clustering, 
#i.e., species within the community are more closely related than expected by chance.

#Now ... we need to bring all this information together so we can plot and play with it!
FinalSet <- right_join(FinalSet, stphylodiv, by = "Species") %>%
  right_join(., NRI, by = "Species")

#A few strange things followed through
#FinalSet$habitat [FinalSet$habitat %in% "Secernentea"] <- "endo"
#FinalSet$habitat [FinalSet$habitat %in% "Thecostraca"] <- "ecto"
#FinalSet$lifestyle [FinalSet$lifestyle %in% "Thecostraca"] <- "direct"

#and I need to convert ses.mpd = mpd.obs.z to -1 * NRI
FinalSet <- mutate(FinalSet, NRI = ses.mpd * -1)

#Remember to specify hosts as habitats and parasites as habitats
write_csv(FinalSet, "C:/Users/Mooseface/Google Drive/University/PhD NZ/Data_and_code/Phylospecificity_HostPSR.csv")

summary(FinalSet)

#rm(commat, taxdist, stphylodiv, NRI, tree, moda)


################
##Here is where we draw and analyse the above data across variables
#1) Housekeeping ... setting up all the datasets
#2) Sampling effort graphics
#3) Parasite data boxplots (remember you need to use the Chapt3Finalset.csv file)
#4) NRI counts (remember you need to use the Chapt3Finalset.csv file)
#5) GAMM's for host variables (remember you need to use the Chapt3Finalset999host.csv file)

#1)
#FinalSet <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/Data_and_code/Chapt3Finalset999.csv", col_types = "cnnnnnnffffffffnnnnnnn")
FinalSet <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/Data_and_code/Phylospecificity_HostPSR.csv", col_types = "cnnnnnnnnnnnn")

#lets bring in corrected dataset and include sampling effort per host
FinalSet <- left_join(FinalSet, sampef, by = c("Species" = "host")) #joins sampling effort

Final<- dplyr::count(SharkRefcor, Host) #pulls out corrected dataset hosts

FinalSetcor<- filter(FinalSet, FinalSet$Species %in% Final$Host)

#SetUp host data for models later...
FinalHost<- left_join(FinalSetcor, sharkh, by = c("Species" = "Host")) %>%
  left_join(., sharkvars, by = c("Species" = "Species")) %>%
  drop_na(c(NRI,Length,depth_range,Trophic))

# Lets plot some stuff
colnames(FinalHost)
summary(FinalSet)

ggplot(data = FinalSet, aes(x = hostrange)) +
  geom_histogram() +
  facet_wrap(FinalSet)


## 2) Sampling effort
p1<-ggplot(data = FinalSet) +
  geom_point(aes(x = sampef, y = hostrange), col = 'darkgrey' ) +
  geom_smooth(aes(sampef , hostrange), method = lm, formula = y~(x), col = "black") +
  coord_capped_cart(bottom = 'none', left = 'none') +
  scale_x_continuous(limits = c(0,80), expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(0,120), expand = c(0.01,0.01)) +
  labs(y= "PSR", x="No. of publications")
p2<-ggplot(data = FinalSet) +
  geom_point(aes(x = sampef, y = Dplus), col = 'darkgrey' ) +
  geom_smooth(aes(sampef , Dplus), method = lm, formula = y~(x), col = "black") +
  coord_capped_cart(bottom = 'none', left = 'none') +
  scale_x_continuous(limits = c(0,80), expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(0,100), expand = c(0.01,0.01)) +
  labs(y= expression("Taxonomic Distinctness ("*Delta*'+)'), x="No. of publications")
p3<-ggplot(data = FinalSet) +
  geom_point(aes(x = sampef, y = NRI), col = 'darkgrey') +
  geom_smooth(aes(sampef , NRI), method = lm, formula = y~(x), col = "black")+
  coord_capped_cart(bottom = 'none', left = 'none') +
  scale_x_continuous(limits = c(0,80),expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(-3.5,7.5),expand = c(0.01,0.01)) +
  labs(y= "NRI", x="No. of publications")

ggarrange(p1, p2, p3, ncol = 1, align = "v", heights = c(1,1,1), common.legend = FALSE)

#cor.test(x, y, method=c("pearson", "kendall", "spearman"))
cor.test(FinalSet$sampef, FinalSet$hostrange, method=c("spearman"))
cor.test(FinalSet$sampef, FinalSet$Dplus, method=c("spearman"))
cor.test(FinalSet$sampef, FinalSet$NRI, method=c("spearman"))

summary(lm(hostrange ~ sampef, FinalSet))
summary(lm(Dplus ~ sampef, FinalSet))
summary(lm(NRI ~ sampef, FinalSet))

##Parasite data box plots
#Plottable structure
play <- FinalSet %>%
  select(hostrange, Phylum, Dplus, group, lifestyle, habitat, NRI) %>%
  #pivot_longer(., c(hostrange, Dplus, NRI), names_to = "spec", values_to = 'value')
  pivot_longer(., c(group, lifestyle, habitat), names_to = "spec", values_to = 'value')



## 3) Box plots
pl1<- ggplot(play, na.rm = TRUE) +
  #geom_boxplot(aes(y = log(hostrange), x = value), na.rm = TRUE) +
  geom_violin(aes(y = log(hostrange), x = value), na.rm = TRUE) +
  facet_wrap(~spec, ncol = 3, scales = 'free') +
  scale_y_continuous(limits = c(0,5),expand = c(0.01,0.01)) +
  theme(strip.text.x = element_blank()) +
  labs(x = "", y = "log Host Range") +
  scale_x_discrete(guide = guide_axis(n.dodge=2))
  #reorder

pl2<- ggplot(play, na.rm = TRUE) +
  geom_boxplot(aes(y = Dplus, x = value), na.rm = TRUE) +
  facet_wrap(~spec, ncol = 3, scales = 'free') +
  scale_y_continuous(limits = c(0,100),expand = c(0.01,0.01)) +
  theme(strip.text.x = element_blank()) +
  labs(x = "", y = expression("Taxonomic Distinctness ("*Delta*'+)')) +
  scale_x_discrete(guide = guide_axis(n.dodge=2))
  #reorder +
  #remove y axis values 

pl3<- ggplot(play, na.rm = TRUE) +
  #geom_boxplot(aes(y = NRI, x = value), na.rm = TRUE) +
  geom_violin(aes(y = NRI, x = value), na.rm = TRUE) +
  facet_wrap(~spec, ncol = 3, scales = 'free') +
  scale_y_continuous(limits = c(-4,25),expand = c(0.01,0.01)) +
  theme(strip.text.x = element_blank()) +
  labs(x = "", y = "NRI") +
  scale_x_discrete(guide = guide_axis(n.dodge=2))
  #reorder +
  #remove y axis values

ggarrange(pl1, pl2, pl3, ncol = 1, align = "h", heights = c(1,1,1), common.legend = FALSE)

  #coord_capped_cart(bottom = 'none', left = 'bottom') +
  scale_x_continuous(limits = c(), expand = c(0.0,0.0)) +
  scale_y_continuous(limits = c(), expand = c(0.0,0.0)) +
  labs(y = "", x="")

################
# 4) Count things for mpd stuff
summary(FinalSet)
play <- filter(FinalSet, NRI < 0, mpd.p.value > 0.95)
play <- filter(FinalSet, NRI > 0, mpd.p.value < 0.05)

#singletons
play <- filter(FinalSet, hostrange == 1)
summary(play)

#group, habitat, lifestyle  
play<- dplyr::count(FinalSet, lifestyle, ses.mpd > 0, mpd.p.value > 0.95) #generalists
play<- dplyr::count(FinalSet, lifestyle, ses.mpd < 0, mpd.p.value < 0.05) #specialists

#statistical tests
#NRI chi sq
test <- as.table(rbind(c(1188, 4), c(210, 0), c(27, 0))) #w/o singletons 749, 161, 8; w/ 1188, 210, 27
dimnames(test) <- list(Group = c("Helminths", "Arthropods", "MinorGroups"),
                    Variable = c("Specialist","Generalist"))

test <- as.table(rbind(c(1026, 4), c(277, 0))) #w/o singletons 647, 149; w/ 1026, 277 
dimnames(test) <- list(Habitat = c("endo", "ecto"),
                       Variable = c("Specialist","Generalist"))

test <- as.table(rbind(c(771, 1), c(653, 3))) #w/o singletons 608, 309; w/ 771, 653
dimnames(test) <- list(Lifestyle = c("direct", "indirect"),
                       Variable = c("Specialist","Generalist"))

chi<- chisq.test(test)
summary(chi)

#################################################################################
# 5) Host variables GAMM's
#Looks like everything is ready, Lets see if we run a GAMM to test the effects of host variabes on specificity while controlling for 
# a few effects. 

library(fitdistrplus)
library(vcd)
library(tidymv)

summary(FinalHost)

#0) see what the data looks like
##Dist of response variables
qplot((hostrange), data=FinalHost)
qplot((Dplus), data=FinalHost)
qplot((NRI), data=FinalHost)
qplot((Weight), (Length), data=FinalHost)
summary(lm((Length) ~ log(Weight), data=FinalHost))
qplot(depth_range, depth_midpoint, data=FinalHost)
summary(lm(depth_midpoint~ depth_range, data=FinalHost))
qplot(DemersPelag, data=FinalHost)
qplot(IUCN_Code, data=FinalHost)

#0) cleveland dot plot ... better judge of outliers...
#Length, Weight, depth_midpoint, depth_range, 
qplot((Length), row.names(FinalHost), data=FinalHost)
##Apart from weight, there seems to be no real issue

#0) pairwise plots
pairs(~log(hostrange) + log(Length) + log(depth_range) + log(Trophic) + log(sampef), data = FinalHost, lower.panel = NULL)
pairs(~Dplus + Length + depth_range + sampef, data = FinalHost, lower.panel = NULL)
pairs(~NRI + Length + depth_range + sampef, data = FinalHost, lower.panel = NULL)
#We should exclude weight as Whale shark is throwing everything off. due to colinearity,
#length is a good measurement

#0) coplot for variables
coplot(hostrange ~ Length | DemersPelag, data = FinalHost, rows = 1)
summary(FinalHost$DemersPelag)
coplot(hostrange ~ depth_range | DemersPelag, data = FinalHost, rows = 1)
summary(FinalHost$DemersPelag)
ggplot(data = FinalHost, aes(x = DemersPelag, y = (hostrange))) + geom_violin(col = "grey", fill = "grey")

#Bathypelagic, benthic, others, pelagic (0) and pelagic-neritic (3) have too few data points.
coplot(hostrange ~ Length | IUCN_Code, data = FinalHost, rows = 1)
summary(FinalHost$IUCN_Code)
#LR/nt (1) and N.E (5) have too few points

#need to remove a few groupings:
FinalHost <- filter(FinalHost, !DemersPelag %in% "bathypelagic") %>%
  filter(., !DemersPelag %in% "benthic") %>%
  filter(., !DemersPelag %in% "others") %>%
  filter(., !DemersPelag %in% "pelagic") %>%
  filter(., !DemersPelag %in% "pelagic-neritic") %>%
  drop_na(DemersPelag)
  filter(FinalHost, !IUCN_Code %in% c("",))

#What happens if we remove the 2 largest fish?
FinalHost <- filter(FinalHost, !Species %in% "Rhincodon typus") %>%
  filter(!Species %in% "Cetorhinus maximus")

#1)Determine error distribution
qplot((hostrange), data=FinalHost) #count data
qplot((Dplus), data=FinalHost) #proportional data (scaled between 0 and 100)
qplot((NRI), data=FinalHost) #continuous decimal

#We need to determine which "Family" our data belongs to. This is similar to deciding the "Density" function of the data
fitdistrplus::descdist(FinalHost$hostrange, discrete = TRUE, boot = 500)  # A skewness-kurtosis plot such as the one proposed by Cullen and Frey (1999) is given for the empirical distribution.
fitdistrplus::descdist((FinalHost$Dplus), discrete = FALSE, boot = 500) #
fitdistrplus::descdist((FinalHost$NRI), discrete = FALSE, boot = 500) #inverse ? gamma dist

##additionally ...
#For discrete distributions (count data...)
vcd::Ord_plot(FinalHost$hostrange)   #The Ord plot plots the number of occurrences against a certain frequency ratio (see Friendly (2000) for details) 
#and should give a straight line if the data comes from a poisson, binomial, negative binomial or log-series distribution

#basic model
a <- gam((hostrange)~s((Length))+s((depth_range))+s((Trophic))+(DemersPelag),
         data=FinalHost,  family = nb(link = "log"),method = "REML", select = TRUE)
#with order as a random effect
b <- gam((hostrange)~s((Length))+s((depth_range))+(DemersPelag)+s(Order, bs = "re"),
         data=FinalHost,   family = nb(link = "log"),method = "REML", select = TRUE)
#with sampef as a random effect
c <- gam((hostrange)~s((Length))+s((depth_range))+(DemersPelag)+s(sampef, bs = "re"),
         data=FinalHost,   family = nb(link = "log"),method = "REML")
#Incl. sampef and order as random variable
d <- gam((hostrange)~s((Length))+s((depth_range))+s(sampef)+(DemersPelag)+s(Order, bs = "re"),
         data=FinalHost,   family = nb(link = "log"),method = "REML")

# family = nb(link = "log"),

plot(c)
a
b
c
anova(a,b)
anova(a,c)
anova(a,d)
anova(b,d)
anova(b,c)
AIC(a,b,c,d)
anova(a)
summary(a)  #basic model assessment
gam.check(b) #confirm convergence
k.check(b)
appraise(b) #confirm visual assumptions
gratia::draw(b)

concurvity(a, full = TRUE) #check for concurvity (coliniarity ... two variables that interact, length/weight)
sum(residuals(a, type = "pearson")^2) / df.residual(a) #checking for over/under dispersion, value should be 1

#Lets create a dataset that allows greater control when plotting this crazy model
#https://cran.r-project.org/web/packages/tidymv/vignettes/predict-gam.html

hostrange.model <- predict.gam(b, type = "terms", se.fit = TRUE) 


#Basic model
hostrange.model <- cbind(FinalHost$DemersPelag, FinalHost$Length, FinalHost$depth_range, 
                         hostrange.model$fit, hostrange.model$se.fit)

coln <- c('DemersPelag', 'Length', 'depth_range', 
          'pred_DemersPelag', 'pred_Length', 'pred_depth_range',
          'st_DemersPelag', 'st_Length', 'st_depth_range'
)

#model with one random terms
hostrange.model <- cbind(FinalHost$DemersPelag, FinalHost$Length, FinalHost$depth_range, FinalHost$Order, 
                         hostrange.model$fit, hostrange.model$se.fit)



coln <- c('DemersPelag', 'Length', 'depth_range', 'Order', 
          'pred_DemersPelag', 'pred_Length', 'pred_depth_range', 'pred_random_a',
          'st_DemersPelag', 'st_Length', 'st_depth_range', 'st_random_a'
)


#model with two random terms
#hostrange.model <- cbind(FinalHost$DemersPelag, FinalHost$Length, FinalHost$depth_range, FinalHost$Order, 
#                         hostrange.model$fit, hostrange.model$se.fit)



coln <- c('DemersPelag', 'Length', 'depth_range', 'Order', 'sampef' 
          'pred_DemersPelag', 'pred_Length', 'pred_depth_range', 'pred_random_a', 'pred_random_b',
          'st_DemersPelag', 'st_Length', 'st_depth_range', 'st_random_a', 'st_random_b'
          )

colnames(hostrange.model) <- coln
hostrange.model <- as_tibble(hostrange.model)
hostrange.model$DemersPelag <- FinalHost$DemersPelag
hostrange.model[, c(2:ncol(hostrange.model))] <- sapply(hostrange.model[, c(2:ncol(hostrange.model))], as.numeric)

hostrange.model <- as_tibble(hostrange.model) %>%
  mutate(ul_Length = pred_Length + st_Length) %>%
  mutate(ll_Length = pred_Length - st_Length) %>%
  mutate(ul_depth_range = pred_depth_range + st_depth_range) %>%
  mutate(ll_depth_range = pred_depth_range - st_depth_range) %>%
  mutate(ll_DemersPelag = pred_DemersPelag + st_DemersPelag) %>%
  mutate(ul_DemersPelag = pred_DemersPelag - st_DemersPelag)

#mean(hostrange.model$st_Length)

# Predicted PSR vs Host Length
ggplot(data = hostrange.model, aes(x = Length, y = pred_Length)) +
  geom_smooth(aes(x = Length, y = ul_Length), method = gam, formula = y ~ s(x), 
              se = FALSE, col = "black", linetype = "dashed", size = 0.6) +
  geom_smooth(aes(x = Length, y = ll_Length), method = gam, formula = y ~ s(x), 
              se = FALSE, col = "black", linetype = "dashed", size = 0.6 ) +
  geom_smooth(method = gam, formula = y ~ s(x), se = FALSE, col = "black", size = 0.8) +
  geom_rug(sides = "b") +
  #facet_grid(rows = vars(DemersPelag))+
  coord_capped_cart(bottom = 'none', left = 'none') +
  scale_x_continuous(limits = c(),expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(),expand = c(0.01,0.01)) +
  labs(y= "Predicted PSR", x="Host Length")

#Predicted PSR vs Host Depth Range
ggplot(data = hostrange.model, aes(x = depth_range, y = pred_depth_range, 
                                   ymin = ll_depth_range, ymax = ul_depth_range)) +
  geom_smooth(method = gam, formula = y ~ s(x), se = FALSE, col = "black", size = 0.8) +
  geom_smooth(aes(x = depth_range, y = ul_depth_range), method = gam, formula = y ~ s(x), 
              se = FALSE, col = "black", linetype = "dashed", size = 0.6 ) +
  geom_smooth(aes(x = depth_range, y = ll_depth_range), method = gam, formula = y ~ s(x), 
              se = FALSE, col = "black", linetype = "dashed", size = 0.6 ) +
  geom_rug(sides = "b") +
  #facet_grid(rows = vars(DemersPelag))+
  coord_capped_cart(bottom = 'none', left = 'none') +
  scale_x_continuous(limits = c(0,4200),expand = c(0.01,0.01)) +
  scale_y_continuous(limits = c(),expand = c(0.01,0.01)) +
  labs(y= "Predicted PSR", x="Host Depth Range")

#Effect of catagorical values
ggplot(data = hostrange.model, aes(x = DemersPelag, y = pred_DemersPelag, 
                                   ymin = ll_DemersPelag, ymax = ul_DemersPelag)) +
  geom_pointrange() +
  scale_y_continuous(limits = c(),expand = c(0.01,0.01)) +
  coord_capped_cart(bottom = 'none', left = 'none') +
  labs(y= "Predicted PSR", x="")



#################Saving graphics
#Sort out panels

ggarrange(p1, p2, p3, nrow = 1, align = "v", heights = c(1,1,1), common.legend = FALSE)

ggarrange(p1, p2, ncol = 2, align = "hv", widths = c(2,1), heights = c(1,1),
          common.legend = FALSE, legend = 'bottom', vjust = 10) #RPfigure with 90deg hist

#####Saving plot
ggsave('Lambda.png', 
       plot = last_plot(), # or give ggplot object name as in myPlot,
       width = 16, height = 10, 
       units = 'cm', # other options c("in", "cm", "mm"),
       type = 'cairo-png', #Specific to smoothing the graph
       dpi = 300)


#####################################################

#If you want to draw the tree

# Taxonomic distances from a classification table with variable step lengths.
Sharktax <- dplyr::select(SharkRef, c(phylumH,classH,orderH,familyH,genusH,species = "Host"))%>% 
  distinct() %>% #pull out host classification info, remove duplicate records
  arrange(species) %>%
  mutate_if(is.character,as.factor) %>%
  column_to_rownames(var = 'species')

Sharktax <- dplyr::select(SharkRef, c(phylumP,classP,orderP,familyP,genusP,species = "Parasite"))%>% 
  distinct(species, .keep_all = TRUE) %>% #pull out host classification info, remove duplicate records
  arrange(species) %>%
  mutate_if(is.character,as.factor) %>%
  column_to_rownames(var = 'species')

taxdis <- taxa2dist(Sharktax, varstep = TRUE)
plot(hclust(taxdis), hang = -1)

