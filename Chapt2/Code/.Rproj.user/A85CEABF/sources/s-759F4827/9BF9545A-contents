##############################
### Shark data download ###
##############################

library(spocc) #provides a unified API to all the biodiversity sources that we provide.
library(tidyverse)
library(taxize)
library(robis)
library(obistools)
library(rgbif)
library(worrms)

#Download a species list.
##Shark
#I need to run this to include subspecies...
worms_records <- function(x,y,z) {
  #First we need to download both GBIF and WoRMS ID's for the species. 
  #We can evaluate WoRMS taxonomy to match GBIF and then go from there
  #This is an if else statement to either give me the matched taxon names, or find ones that work with GBIF
  gbif <- if(z == y) {x}
  else if(z != y) {name<-do.call(rbind, downstream(x, db = 'worms', downto = z, rank = y))
  name$name}
  #Use evaluated taxa names
  gbif <- do.call(rbind, downstream(gbif, db = 'gbif', downto = 'species', rank = y)) # pulls GBIF species out
  wm_id <- get_wormsid(gbif$name, searchtype = "scientific", 
                       marine_only = FALSE, accepted = TRUE, messages = FALSE, ask = TRUE) # Pulls wormsid per gbif species
  wm_id <- as.numeric(wm_id)
  worms <- do.call(rbind, downstream(x, db = 'worms', downto = 'species', rank = y)) #pulls worms species names out
  
  #Join GBIF and WoRMS together and remove any NA's from the joined dataset
  
  gbif <- cbind(gbif, wm_id) %>%
    select(id = wm_id, name, rank, key)
  join <- full_join(worms,gbif, by = c('id', 'name', 'rank')) %>%
    filter(!is.na(id))
  
  #Finally call the full worms record out
  do.call(rbind, lapply(join$id, function(i){
    
    wm_record(i)
    
  }))
} #function to to call species names out of WoRMS

#I already did this for Chapter 3, see...
#source(CartilaginousCleaning)

#read it back in...
Shark_data <- read_csv("C:/Users/Mooseface/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkFull3.0.csv")

Shark_data <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/MarineParasitePhD/Chapt3/Data/SharkFull3.0.csv")

####
#Lets turn these into functions...
####

gbif_occ <- function(x,y) { #only place species list/vector, y=label the file.
  #Occ (GBIF) through spocc
  OccGbif.spocc <- spocc::occ(host, from = c('gbif'), has_coords = TRUE)
  OccGbif.spocc <- occ2df(OccGbif.spocc$gbif)
  
  #Occ (GBIF) through rgbif
  OccGbif.rgbif <- occ_data(scientificName = host)
  OccGbif.rgbif <- flatten_df(OccGbif.rgbif)
  
  #Bring these two datasets together and save
  # we have incompatible types to join so will need to change that before we join.
  OccGbif.rgbif$eventDate <- as.Date(OccGbif.rgbif$eventDate, format = "%Y/%m/%d/%H:%M:%S")
  OccGbif <- full_join(OccGbif.spocc, OccGbif.rgbif)
  OccGbif <- dplyr::select(OccGbif, species = acceptedScientificName, decimalLatitude, decimalLongitude, 
                           coordinateUncertaintyInMeters, basisOfRecord, depth)
  # Issue with names as it includes authority values. lets tease those out
  OccGbif$species <- iconv(OccGbif$species, 'utf-8', 'ascii', sub='')
  
  OccGbif <- separate(OccGbif, "species", into = c('Genus', 'Species', 'Authority')) %>%
    tidyr::unite(., col = species, c('Genus', 'Species'), sep = " ", remove = TRUE) %>%
    dplyr::select(!Authority)
  
  #removes any NA's in location
  OccGbif <- filter(OccGbif, !is.na(decimalLongitude)) %>%
    filter(!is.na(decimalLatitude))
  
  #converts to numeric for mapping
  OccGbif$decimalLongitude <- as.numeric(OccGbif$decimalLongitude) 
  OccGbif$decimalLatitude <- as.numeric(OccGbif$decimalLatitude)
  
  
  write_csv(OccGbif, file = paste("C:/Users/tmor201/Google Drive/University/PhD NZ/Data_and_code/SDM/Occ_gbif_",y,".csv", sep=""))
  
}

#Now pull unique host values out
host <- as.data.frame(distinct(Shark_data, Host))[[1]]


OccGbif.Host <- gbif_occ(host$Host, "host")
rm(OccGbif.Host)
#OccGbif.Parasite <- gbif_occ(unique(Shark_data$Parasite), "parasite")

#read back in
#OccGbif <- read_csv("C:/Users/mooseface/Google Drive/University/PhD NZ/Data_and_code/SDM/Occ_GBIF.csv")                   


#Occurrence (OBIS) through rOBIS
#OccObis <- dplyr::bind_rows(sapply(Copepoda$valid_name, robis::occurrence)) #for larger datasets

OccObis.Host <- dplyr::bind_rows(sapply(distinct(Shark_data, Host), robis::occurrence)) %>% #for larger datasets
                dplyr::select(species = scientificName, decimalLatitude, decimalLongitude, 
                              coordinatePrecision, basisOfRecord, depth)
  
write_csv(OccObis.Host, "C:/Users/Mooseface/Google Drive/University/PhD NZ/Data_and_code/SDM/Occ_OBIS_host.csv")

OccObis.Parasite <- dplyr::bind_rows(sapply(unique(Shark_data$Parasite), robis::occurrence)) %>% #for larger datasets
                    dplyr::select(species = scientificName, decimalLatitude, decimalLongitude, 
                                  coordinatePrecision, basisOfRecord, depth)
write_csv(OccObis.Parasite, "C:/Users/Mooseface/Google Drive/University/PhD NZ/Data_and_code/SDM/Occ_OBIS_parasite.csv")


OccObis <- read_csv("C:/Users/mooseface/Google Drive/University/PhD NZ/Data_and_code/SDM/Copepoda_Occ_OBIS.csv")
OccObis <- dplyr::select(OccObis, species = scientificName, decimalLatitude, decimalLongitude, 
                         coordinatePrecision = coordinateUncertaintyInMeters, basisOfRecord, individualCount, depth)


#converts to numeric for mapping
OccObis$decimalLongitude <- as.numeric(OccObis$decimalLongitude)
OccObis$decimalLatitude <- as.numeric(OccObis$decimalLatitude)

#Removes any NA Occurence values
OccObis <- filter(OccObis, !is.na(decimalLongitude)) %>%
  filter(!is.na(decimalLatitude))

write.csv(OccObis, "C:/Users/tmor201/Google Drive/University/PhD NZ/Data_and_code/SDM/Copepoda_Occ_OBIS.csv")

#read raw data in to check.
OccGbif <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/Data_and_code/SDM/Copepoda_Occ_GBIF.csv")
OccObis <- read_csv("C:/Users/tmor201/Google Drive/University/PhD NZ/Data_and_code/SDM/Copepoda_Occ_OBIS.csv")

colnames(OccGbif)
colnames(OccObis)

##Join GBIF and OBIS
Occ <- dplyr::union_all(OccObis, OccGbif)

write.csv(Occ, "C:/Users/mooseface/Google Drive/University/PhD NZ/Data_and_code/Copepoda_Occ_2.csv")

Occ <- read_csv("C:/Users/mooseface/Google Drive/University/PhD NZ/Data_and_code/Copepoda_Occ_2.csv")

#issue with L.salmonis and L.salmonis salmonis. 
Occ$species[Occ$species == "Lepeophtheirus salmonis salmonis"] <- "Lepeophtheirus salmonis"

#housekeeping
#rm(OccObis, OccGbif, OccObisFull, OccGbifFull, Cyclopoida, Copepoda, Worms_psite)

#save dataset
write.csv(Occ, "C:/Users/mooseface/Google Drive/University/PhD NZ/Data_and_code/Copepoda_Occ_2.csv")
